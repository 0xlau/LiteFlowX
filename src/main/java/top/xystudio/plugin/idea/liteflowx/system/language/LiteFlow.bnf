{
    parserClass="top.xystudio.plugin.idea.liteflowx.system.language.parse.LiteFlowParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="LiteFlow"
    psiImplClassSuffix="Impl"
    psiPackage="top.xystudio.plugin.idea.liteflowx.system.language.psi"
    psiImplPackage="top.xystudio.plugin.idea.liteflowx.system.language.psi.impl"
    psiImplUtilClass = "top.xystudio.plugin.idea.liteflowx.system.language.psi.impl.LiteFlowLanguagePsiImplUtil"

    elementTypeHolderClass="top.xystudio.plugin.idea.liteflowx.system.language.psi.LiteFlowTypes"
    elementTypePrefix = "LITEFLOW_"
    elementTypeClass="top.xystudio.plugin.idea.liteflowx.system.language.psi.LiteFlowElementType"
    tokenTypeClass="top.xystudio.plugin.idea.liteflowx.system.language.psi.LiteFlowTokenType"

 tokens = [

    BRACE_LEFT           =  '{'
    BRACE_RIGHT          =  '}'
    BRACK_LEFT           =  '['
    BRACK_RIGHT          =  ']'
    PAREN_LEFT           =  '('
    PAREN_RIGHT          =  ')'

    COLON                =  ':'
    SEMICOLON            =  ';'
    COMMA                =  ','

    EQ                   =  '=='
    ASSIGN               =  '='
    NOT_EQ               =  '!='
    NOT                  =  '!'
    PLUS_PLUS            =  '++'
//    PLUS_ASSIGN          =  '+='
    PLUS                 =  '+'
    MINUS_MINUS          =  '--'
//    MINUS_ASSIGN         =  '-='
    MINUS                =  '-'
    COND_OR              =  '||'
//    BIT_OR_ASSIGN        =  '|='
//    BIT_CLEAR_ASSIGN     =  '&^='
//    BIT_CLEAR            =  '&^'
//    BIT_TILDE            =  '&~'
    COND_AND             =  '&&'
//    BIT_AND_ASSIGN       =  '&='
    BIT_AND              =  '&'
//    EQ_TILDE             =  '=~'
    BIT_OR               =  '|'
//    SHIFT_LEFT_ASSIGN    =  '<<='
    SHIFT_LEFT           =  '<<'
//    SEND_CHANNEL         =  '<-'
    LESS_OR_EQUAL        =  '<='
    LESS                 =  '<'
//    BIT_XOR_ASSIGN       =  '^='
    BIT_XOR              =  '^'
//    MUL_ASSIGN           =  '*='
    MUL                  =  '*'
//    QUOTIENT_ASSIGN      =  '/='
    QUOTIENT             =  '/'
//    REMAINDER_ASSIGN     =  '%='
    REMAINDER            =  '%'
//    SHIFT_RIGHT_ASSIGN   =  '>>='
    SHIFT_RIGHT          =  '>>'
    GREATER_OR_EQUAL     =  '>='
    GREATER              =  '>'
//    VAR_ASSIGN           =  ':='
//    TRIPLE_DOT           =  '...'
    DOT                  =  '.'
    QUESTION             =  '?'
//    LAMBDA_TARGET        =  '->'

//    SEMICOLON_SYNTHETIC  = '<NL>'
//    TYPE_                = 'type'
//    raw_string           = 'raw_string'

    // language common
    identifier = 'regexp:[a-zA-Z_][a-zA-Z\d_]*'
    line_comment = 'regexp://.*'
//    block_comment="regexp:/\*\*(.|\n)*?\*\*/"
    block_comment = "regexp:/\*\* !([^]* \*\*/ [^]*) (\*\*/)?"
    //literal
    space = "regexp:\s+"
    string = "regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\\"|\\'|\\)*\")"
    number = "regexp:-?(0[xX][0-9a-fA-F]+|[0-9]|[1-9]\d*N?M?|\d+(\.\d+)?([Ee][+-]?\d+)?M?)"
    null = "null"
    true = "true"
    false = "false"

    // qlexpress keywords
    mod = "mod"
    nor = "nor"
    in = "in"
    for = "for"
    while = "while"
    if = "if"
    when = "when"
    then = "then"
    else = "else"
    exportAlias = "exportAlias"
    alias = "alias"
    break = "break"
    continue = "continue"
    return = "return"
    macro = "macro"
    function = "function"
    def = "def"
    exportDef = "exportDef"
    new = "new"
    array = "array"
    anonymousNewArray = "anonymousNewArray"
    like = "like"
    class = "class"
    VClass = "VClass"
    cast = "cast"

    // liteflow keywords
    THEN = "THEN"
    WHEN = "WHEN"
    SWITCH = "SWITCH"
    PRE = "PRE"
    FINALLY = "FINALLY"
    LIF = "IF"
    LELIF = "ELIF"
    LELSE = "ELSE"
    LFOR = "FOR"
    LITERATOR = "ITERATOR"
    LWHILE = "WHILE"
    any = "any"
    id = "id"
    ignoreError = "ignoreError"
    tag = "tag"
    threadPool = "threadPool"
    to = "to"
    UTO = "TO"
    data = "data"
    node = "node"
    UNODE = "NODE"
    DO = "DO"
    LBREAK = "BREAK"
    DEFAULT = "DEFAULT"
  ]

}

liteFlowFile ::= codes

codes ::= statement*

statement ::= (
    line_comment |
    block_comment |
    ifStatement |
    forStatement |
    whileStatement |
    assignStatement |
    breakStatement |
    continueStatement |
    threeStatement |
    fnInvokeStatement |
    newStatement |
    returnStatement |
    opSelfStatement |
    liteFlowStatement |
    BRACE_LEFT statement* BRACE_RIGHT
)

/** Statement Start **/

ifStatement ::= if PAREN_LEFT allExpress PAREN_RIGHT BRACE_LEFT codes BRACE_RIGHT {else ifStatement }* {else BRACE_LEFT codes BRACE_RIGHT}?
forStatement ::= for PAREN_LEFT [assignExpress] SEMICOLON [allExpress] SEMICOLON [(opSelfExpress | assignExpress)]  PAREN_RIGHT BRACE_LEFT codes BRACE_RIGHT
whileStatement ::= while PAREN_LEFT allExpress PAREN_RIGHT BRACE_LEFT codes BRACE_RIGHT

//allExpressStatement ::= allExpress
assignStatement ::= assignExpress SEMICOLON
threeStatement ::= threeExpress SEMICOLON
fnInvokeStatement ::= fnInvokeExpress SEMICOLON
newStatement::= newExpress SEMICOLON
returnStatement ::= return allExpress* SEMICOLON
breakStatement ::= break SEMICOLON
continueStatement ::= continue SEMICOLON
opSelfStatement ::= opSelfExpress SEMICOLON
liteFlowStatement ::= liteFlowConditionExpress SEMICOLON {pin=1 recoverWhile=recover_liteFlowStatement}
private recover_liteFlowStatement ::= !(SEMICOLON | liteFlowStatement | assignStatement | line_comment | block_comment | fnInvokeStatement)

/** Statement Start **/

/** Express Start **/

// 引用表达式
refExpress ::= typeRef

// 数组表达式
arrayExpress ::= BRACK_LEFT [allExpress {COMMA (allExpress|op)}*] BRACK_RIGHT

// 数组引用表达式
useArrayExpress ::= refExpress BRACK_LEFT allExpress BRACK_RIGHT

// new对象表达式
newExpress ::= new fnInvokeExpress

// 赋值表达式
assignExpress ::= refExpress ASSIGN [PLUS|MINUS] allExpress

// 自加自减表达式
opSelfExpress ::= refExpress (PLUS_PLUS | MINUS_MINUS)

// 等于号右边的表达式（整体）
allExpress ::= (subAllExpress | PAREN_LEFT subAllExpress PAREN_RIGHT) {op (subAllExpress|PAREN_LEFT subAllExpress PAREN_RIGHT)}*
               | {(subAllExpress | PAREN_LEFT subAllExpress PAREN_RIGHT) op}* (subAllExpress|PAREN_LEFT subAllExpress PAREN_RIGHT)

// 等于号右边的表达式（细分）
subAllExpress ::= opSelfExpress | useArrayExpress | arrayExpress | threeExpress | newExpress | liteFlowConditionExpress | fnInvokeExpress {op allExpress}* | express | PAREN_LEFT assignExpress PAREN_RIGHT

// 三目表达式
threeExpress ::= (fnInvokeExpress | express) QUESTION allExpress COLON allExpress

// 普通表达式
express ::=  opExpress | PAREN_LEFT opExpress PAREN_RIGHT  |  opExpress  {op (allExpress|PAREN_LEFT allExpress PAREN_RIGHT)}*

// 操作符表达式
opExpress ::= [NOT] ( (fnInvokeExpress|refExpress|value)| PAREN_LEFT (fnInvokeExpress|refExpress|value) PAREN_RIGHT) {op (allExpress|PAREN_LEFT allExpress PAREN_RIGHT)}*

// 函数应用表达式：xxx(a,b,c)
fnInvokeExpress ::= refExpress fnParamExpress

// 函数应用分隔符表达式
fnParamExpress ::= {PAREN_LEFT [allExpress {COMMA (allExpress|op)}*] PAREN_RIGHT}+

// LiteFlow 通用表达式
liteFlowAllExpress ::= liteFlowConditionExpress | liteFlowNodeRefExpress

// LiteFlow node("")或NODE("") 子表达式
liteFlowNodeStringSubExpress ::= (node | UNODE) PAREN_LEFT liteFlowNodeStringRef PAREN_RIGHT {DOT (liteFlowTagExpress | liteFlowDataExpress)}* {pin=1}

// liteFlow Node引用 子表达式
liteFlowNodeRefSubExpress ::= liteFlowNodeRef {DOT (liteFlowTagExpress | liteFlowDataExpress)}*

// LiteFlow Node引用表达式
liteFlowNodeRefExpress ::= {block_comment | line_comment}* (liteFlowNodeRefSubExpress | liteFlowNodeStringSubExpress) {block_comment | line_comment}*

// LiteFlow Condition 表达式
liteFlowConditionExpress ::= {block_comment | line_comment}* (liteFlowThenExpress | liteFlowWhenExpress | liteFlowSwitchExpress | liteFlowPreExpress | liteFlowFinallyExpress | liteFlowIf2Express | liteFlowIf3Express | liteFlowForExpress | liteFlowIteratorExpress | liteFlowWhileExpress) {block_comment | line_comment}*

// LiteFlow IF(_1, _2).ELIF(_3, _4).ELSE() 表达式
liteFlowIf2Express ::= LIF PAREN_LEFT liteFlowNodeRefExpress COMMA liteFlowAllExpress PAREN_RIGHT [liteFlowIf2SubExpress] {pin=7}
liteFlowIf2SubExpress ::= DOT ( liteFlowIf2ElifExpress | liteFlowIf2ElseExpress | liteFlowIdExpress ) {pin=1}

liteFlowIf2ElifExpress ::= LELIF PAREN_LEFT liteFlowNodeRefExpress COMMA liteFlowAllExpress PAREN_RIGHT [liteFlowIf2ElifSubExpress] {pin=1}
liteFlowIf2ElifSubExpress ::= DOT ( liteFlowIf2ElifExpress | liteFlowIf2ElseExpress | liteFlowIdExpress ) {pin=1}

liteFlowIf2ElseExpress ::= LELSE PAREN_LEFT liteFlowAllExpress PAREN_RIGHT [liteFlowIf2ElseSubExpress] {pin=1}
liteFlowIf2ElseSubExpress ::= DOT (liteFlowIdExpress) {pin=1}

// LiteFlow IF(_1, _2, _3) 表达式
liteFlowIf3Express ::= LIF PAREN_LEFT liteFlowNodeRefExpress COMMA liteFlowAllExpress COMMA liteFlowAllExpress PAREN_RIGHT [liteFlowIf3SubExpress] {pin=1}
liteFlowIf3SubExpress ::= DOT liteFlowIdExpress {pin=1}

// LiteFlow THEN() 表达式
liteFlowThenExpress ::= THEN PAREN_LEFT liteFlowAllExpress {COMMA liteFlowAllExpress}* PAREN_RIGHT [liteFlowThenSubExpress] {pin=1}
liteFlowThenSubExpress ::= DOT liteFlowIdExpress {pin=1}

// LiteFlow WHEN() 表达式
liteFlowWhenExpress ::= WHEN PAREN_LEFT liteFlowAllExpress {COMMA liteFlowAllExpress}* PAREN_RIGHT { liteFlowWhenSubExpress }* {pin=1}
liteFlowWhenSubExpress ::= DOT (liteFlowIdExpress | liteFlowIgnoreErrorExpress | liteFlowAnyExpress | liteFlowThreadPoolExpress) {pin=1}

// LiteFlow SWITCH() 表达式
liteFlowSwitchExpress ::= SWITCH PAREN_LEFT liteFlowNodeRefExpress PAREN_RIGHT DOT (liteFlowToExpress | liteFlowDefaultExpress) [ liteFlowSwitchSubExpress ] {pin=1}
liteFlowSwitchSubExpress ::= DOT liteFlowIdExpress {pin=1}

// liteFlow FOR() 表达式
liteFlowForExpress ::= LFOR PAREN_LEFT (number | liteFlowNodeRefExpress) PAREN_RIGHT DOT liteFlowDoExpress [liteFlowForSubExpress] {pin = 1}
liteFlowForSubExpress ::= DOT (liteFlowBreakExpress) {pin=1}

// liteFlow ITERATOR() 表达式
liteFlowIteratorExpress ::= LITERATOR PAREN_LEFT (liteFlowNodeRefExpress) PAREN_RIGHT DOT liteFlowDoExpress [liteFlowIteratorSubExpress] {pin = 1}
liteFlowIteratorSubExpress ::= DOT (liteFlowBreakExpress) {pin=1}

// liteFlow WHILE() 表达式
liteFlowWhileExpress ::= LWHILE PAREN_LEFT liteFlowNodeRefExpress PAREN_RIGHT DOT liteFlowDoExpress [liteFlowWhileSubExpress] {pin = 1}
liteFlowWhileSubExpress ::= DOT (liteFlowBreakExpress) {pin=1}

// LiteFlow PRE() 表达式
liteFlowPreExpress ::= PRE PAREN_LEFT liteFlowAllExpress {COMMA liteFlowAllExpress}* PAREN_RIGHT {pin=1}

// LiteFlow FINALLY() 表达式
liteFlowFinallyExpress ::= FINALLY PAREN_LEFT liteFlowAllExpress {COMMA liteFlowAllExpress}* PAREN_RIGHT {pin=1}

// LiteFlow .to()或.TO() 表达式
liteFlowToExpress ::= (to | UTO) PAREN_LEFT liteFlowAllExpress {COMMA liteFlowAllExpress}* PAREN_RIGHT [DOT liteFlowDefaultExpress] {pin=1}

// LiteFlow .DEFAULT() 表达式
liteFlowDefaultExpress ::= DEFAULT PAREN_LEFT liteFlowAllExpress PAREN_RIGHT {pin=1}

// liteFlow .DO() 表达式
liteFlowDoExpress ::= DO PAREN_LEFT liteFlowAllExpress PAREN_RIGHT {pin=1}

// liteFlow .BREAK() 表达式
liteFlowBreakExpress ::= LBREAK PAREN_LEFT liteFlowNodeRefExpress PAREN_RIGHT {pin=1}

// LiteFlow .id() 表达式
liteFlowIdExpress ::= id PAREN_LEFT string PAREN_RIGHT {pin=1}

// LiteFlow .ignoreError() 表达式
liteFlowIgnoreErrorExpress ::= ignoreError PAREN_LEFT boolean PAREN_RIGHT {pin=1}

// LiteFlow .any() 表达式
liteFlowAnyExpress ::= any PAREN_LEFT boolean PAREN_RIGHT {pin=1}

// LiteFlow .threadPool() 表达式
liteFlowThreadPoolExpress ::= threadPool PAREN_LEFT string PAREN_RIGHT {pin=1}

// LiteFlow .tag() 表达式
liteFlowTagExpress ::= tag PAREN_LEFT string PAREN_RIGHT {pin=1}

// liteFlow .data() 表达式
liteFlowDataExpress ::= data PAREN_LEFT (string | elVariableRef) PAREN_RIGHT {pin=1}

/** Express End **/

// Ref

liteFlowNodeStringRef ::= string

liteFlowNodeRef ::= identifier

elVariableRef ::= identifier

typeRef ::= identifier {DOT identifier}*

// 操作符
op ::=
      PLUS                 // +
    | MINUS                // -
    | MUL                  // *
    | QUOTIENT             // /
    | REMAINDER            // %
    | LESS                 // <
    | LESS_OR_EQUAL        // <=
    | GREATER              // >
    | GREATER_OR_EQUAL     // >=
    | EQ                   // ==
    | NOT_EQ               // !=
    | BIT_AND              // &
    | BIT_OR               // |
    | BIT_XOR              // ^
    | NOT                  // !
    | COND_OR              // ||
    | COND_AND             // &&
    | mod                  // MOD
    | nor                  // NOR
//    | BIT_TILDE            // &~
//    | EQ_TILDE             // =~

// 字符串 数字 布尔 空
value ::= string|number|boolean|null

boolean ::= true|false