// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _LiteFlowLexer.flex

package top.xystudio.plugin.idea.liteflowx.system.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static top.xystudio.plugin.idea.liteflowx.system.language.psi.LiteFlowTypes.*;


public class _LiteFlowLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\5\u0100\1\u0200\1\u0300\1\u0100\5\u0400\1\u0500\1\u0600"+
    "\1\u0700\5\u0100\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00"+
    "\1\u0e00\3\u0100\1\u0f00\17\u0100\1\u1000\165\u0100\1\u0600\1\u0100"+
    "\1\u1100\1\u1200\1\u1300\1\u1400\54\u0100\10\u1500\37\u0100\1\u0a00"+
    "\4\u0100\1\u1600\10\u0100\1\u1700\2\u0100\1\u1800\1\u1900\1\u1400"+
    "\1\u0100\1\u0500\1\u0100\1\u1a00\1\u1700\1\u0900\3\u0100\1\u1300"+
    "\1\u1b00\114\u0100\1\u1c00\1\u1300\153\u0100\1\u1d00\11\u0100\1\u1e00"+
    "\1\u1400\6\u0100\1\u1300\u0f16\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\2\0"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\11\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\0\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\36\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\36\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\36\1\57\1\60"+
    "\1\61\1\62\1\36\1\0\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\36\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\36\1\102\1\103\1\104"+
    "\1\105\1\36\1\106\1\107\1\110\1\36\1\111\1\112"+
    "\1\113\7\0\1\2\32\0\1\1\u01bf\0\12\114\206\0"+
    "\12\114\306\0\12\114\234\0\12\114\166\0\12\114\140\0"+
    "\12\114\166\0\12\114\106\0\12\114\u0116\0\12\114\106\0"+
    "\12\114\346\0\1\1\u015f\0\12\114\46\0\12\114\u012c\0"+
    "\12\114\200\0\12\114\246\0\12\114\6\0\12\114\266\0"+
    "\12\114\126\0\12\114\206\0\12\114\6\0\12\114\246\0"+
    "\13\1\35\0\2\2\5\0\1\1\57\0\1\1\240\0"+
    "\1\1\u01cf\0\12\114\46\0\12\114\306\0\12\114\26\0"+
    "\12\114\126\0\12\114\u0196\0\12\114\6\0\u0100\115\240\0"+
    "\12\114\206\0\12\114\u012c\0\12\114\200\0\12\114\74\0"+
    "\12\114\220\0\12\114\166\0\12\114\146\0\12\114\206\0"+
    "\12\114\106\0\12\114\266\0\12\114\u0164\0\62\114\100\0"+
    "\12\114\266\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[7936];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\16\1\17\1\20\1\21\1\22\1\23\1\24\17\25"+
    "\1\26\1\27\1\30\16\25\1\31\1\32\1\33\1\34"+
    "\1\0\1\35\1\0\1\36\2\0\1\37\1\40\1\0"+
    "\1\41\1\0\1\16\1\0\1\16\1\0\1\16\1\42"+
    "\1\43\1\44\1\45\1\46\4\25\1\47\3\25\1\50"+
    "\2\25\1\51\3\25\1\52\20\25\1\53\1\54\1\25"+
    "\1\55\12\25\1\56\2\25\1\57\1\35\1\60\1\16"+
    "\1\0\2\16\1\61\6\25\1\62\2\25\1\63\1\64"+
    "\7\25\1\65\6\25\1\66\3\25\1\67\5\25\1\70"+
    "\1\71\1\25\1\72\3\25\1\73\3\25\1\60\3\25"+
    "\1\74\1\75\2\25\1\76\1\25\1\77\1\25\1\100"+
    "\5\25\1\101\2\25\1\102\1\103\4\25\1\104\2\25"+
    "\1\105\1\106\3\25\1\107\1\25\1\60\1\110\1\111"+
    "\5\25\1\112\1\113\1\25\1\114\1\115\1\116\2\25"+
    "\1\117\2\25\1\120\4\25\1\121\1\60\3\25\1\122"+
    "\1\123\7\25\1\124\1\25\1\125\1\126\12\25\1\127"+
    "\1\25\1\130\2\25\1\131\2\25\1\132\3\25\1\133"+
    "\7\25\1\134\1\25\1\135\1\136\6\25\1\137\2\25"+
    "\1\140";

  private static int [] zzUnpackAction() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\116\0\u0186\0\u01d4"+
    "\0\116\0\116\0\116\0\u0222\0\116\0\u0270\0\116\0\u02be"+
    "\0\u030c\0\u035a\0\116\0\116\0\u03a8\0\u03f6\0\u0444\0\116"+
    "\0\u0492\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u0618\0\u0666\0\u06b4"+
    "\0\u0702\0\u0750\0\u079e\0\u07ec\0\u083a\0\u0888\0\u08d6\0\116"+
    "\0\116\0\116\0\u0924\0\u0972\0\u09c0\0\u0a0e\0\u0a5c\0\u0aaa"+
    "\0\u0af8\0\u0b46\0\u0b94\0\u0be2\0\u0c30\0\u0c7e\0\u0ccc\0\u0d1a"+
    "\0\116\0\u0d68\0\116\0\116\0\u0138\0\116\0\u0db6\0\116"+
    "\0\u01d4\0\u0e04\0\116\0\116\0\u0e52\0\u0ea0\0\u0eee\0\u0f3c"+
    "\0\u0f8a\0\116\0\u0fd8\0\u1026\0\116\0\116\0\116\0\116"+
    "\0\116\0\u1074\0\u10c2\0\u1110\0\u115e\0\u0666\0\u11ac\0\u11fa"+
    "\0\u1248\0\u0666\0\u1296\0\u12e4\0\u0666\0\u1332\0\u1380\0\u13ce"+
    "\0\u0666\0\u141c\0\u146a\0\u14b8\0\u1506\0\u1554\0\u15a2\0\u15f0"+
    "\0\u163e\0\u168c\0\u16da\0\u1728\0\u1776\0\u17c4\0\u1812\0\u1860"+
    "\0\u18ae\0\u0666\0\u0666\0\u18fc\0\u0666\0\u194a\0\u1998\0\u19e6"+
    "\0\u1a34\0\u1a82\0\u1ad0\0\u1b1e\0\u1b6c\0\u1bba\0\u1c08\0\u0666"+
    "\0\u1c56\0\u1ca4\0\116\0\u0138\0\u1cf2\0\u1d40\0\u1d8e\0\u1ddc"+
    "\0\u0fd8\0\u0666\0\u1e2a\0\u1e78\0\u1ec6\0\u1f14\0\u1f62\0\u1fb0"+
    "\0\u0666\0\u1ffe\0\u204c\0\u0666\0\u0666\0\u209a\0\u20e8\0\u2136"+
    "\0\u2184\0\u21d2\0\u2220\0\u226e\0\u0666\0\u22bc\0\u230a\0\u2358"+
    "\0\u23a6\0\u23f4\0\u2442\0\u0666\0\u2490\0\u24de\0\u252c\0\u0666"+
    "\0\u257a\0\u25c8\0\u2616\0\u2664\0\u26b2\0\u0666\0\u0666\0\u2700"+
    "\0\u0666\0\u274e\0\u279c\0\u27ea\0\u0666\0\u2838\0\u2886\0\u28d4"+
    "\0\u2922\0\u2970\0\u29be\0\u2a0c\0\u0666\0\u0666\0\u2a5a\0\u2aa8"+
    "\0\u0666\0\u2af6\0\u0666\0\u2b44\0\u0666\0\u2b92\0\u2be0\0\u2c2e"+
    "\0\u2c7c\0\u2cca\0\u0666\0\u2d18\0\u2d66\0\u0666\0\u0666\0\u2db4"+
    "\0\u2e02\0\u2e50\0\u2e9e\0\u0666\0\u2eec\0\u2f3a\0\u0666\0\u0666"+
    "\0\u2f88\0\u2fd6\0\u3024\0\u0666\0\u3072\0\u30c0\0\u0666\0\u0666"+
    "\0\u310e\0\u315c\0\u31aa\0\u31f8\0\u3246\0\u0666\0\u0666\0\u3294"+
    "\0\u0666\0\u0666\0\u0666\0\u32e2\0\u3330\0\u0666\0\u337e\0\u33cc"+
    "\0\u0666\0\u341a\0\u3468\0\u34b6\0\u3504\0\u0666\0\116\0\u3552"+
    "\0\u35a0\0\u35ee\0\u0666\0\u0666\0\u363c\0\u368a\0\u36d8\0\u3726"+
    "\0\u3774\0\u37c2\0\u3810\0\u0666\0\u385e\0\u0666\0\u0666\0\u38ac"+
    "\0\u38fa\0\u3948\0\u3996\0\u39e4\0\u3a32\0\u3a80\0\u3ace\0\u3b1c"+
    "\0\u3b6a\0\u0666\0\u3bb8\0\u0666\0\u3c06\0\u3c54\0\u0666\0\u3ca2"+
    "\0\u3cf0\0\u0666\0\u3d3e\0\u3d8c\0\u3dda\0\u0666\0\u3e28\0\u3e76"+
    "\0\u3ec4\0\u3f12\0\u3f60\0\u3fae\0\u3ffc\0\u0666\0\u404a\0\u0666"+
    "\0\u0666\0\u4098\0\u40e6\0\u4134\0\u4182\0\u41d0\0\u421e\0\u0666"+
    "\0\u426c\0\u42ba\0\u0666";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\2\37\1\40\3\37"+
    "\1\41\1\42\1\43\1\37\1\44\1\45\1\37\1\46"+
    "\1\47\2\37\1\50\1\2\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\2\37\1\61\1\37\1\62"+
    "\1\63\1\64\1\37\1\65\1\66\1\37\1\67\1\37"+
    "\1\70\2\37\1\71\1\72\1\73\2\2\117\0\2\3"+
    "\140\0\1\74\70\0\4\75\1\76\53\75\1\77\35\75"+
    "\6\0\1\100\107\0\7\101\1\76\50\101\1\102\35\101"+
    "\13\0\1\103\117\0\1\104\2\0\1\21\1\22\106\0"+
    "\1\105\4\0\1\106\114\0\1\107\1\0\2\110\12\0"+
    "\1\111\6\0\1\112\11\0\1\113\11\0\1\111\17\0"+
    "\1\113\24\0\1\107\1\0\2\22\12\0\1\111\6\0"+
    "\1\112\1\114\22\0\1\111\52\0\1\115\1\116\115\0"+
    "\1\117\115\0\1\120\1\121\107\0\2\37\6\0\14\37"+
    "\1\122\12\37\4\0\26\37\3\0\1\37\21\0\2\37"+
    "\6\0\17\37\1\123\7\37\4\0\26\37\3\0\1\37"+
    "\21\0\2\37\6\0\1\124\26\37\4\0\26\37\3\0"+
    "\1\37\21\0\2\37\6\0\4\37\1\125\10\37\1\126"+
    "\11\37\4\0\26\37\3\0\1\37\21\0\2\37\6\0"+
    "\12\37\1\127\14\37\4\0\26\37\3\0\1\37\21\0"+
    "\2\37\6\0\10\37\1\130\4\37\1\131\11\37\4\0"+
    "\26\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\26\37\3\0\1\37\21\0\2\37\6\0\5\37\1\132"+
    "\13\37\1\133\5\37\4\0\26\37\3\0\1\37\21\0"+
    "\2\37\6\0\15\37\1\134\11\37\4\0\26\37\3\0"+
    "\1\37\21\0\2\37\6\0\17\37\1\135\7\37\4\0"+
    "\26\37\3\0\1\37\21\0\2\37\6\0\17\37\1\136"+
    "\7\37\4\0\26\37\3\0\1\37\21\0\2\37\6\0"+
    "\24\37\1\137\2\37\4\0\26\37\3\0\1\37\21\0"+
    "\2\37\6\0\7\37\1\140\5\37\1\141\11\37\4\0"+
    "\26\37\3\0\1\37\21\0\2\37\6\0\2\37\1\142"+
    "\24\37\4\0\26\37\3\0\1\37\21\0\2\37\6\0"+
    "\7\37\1\143\17\37\4\0\26\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\12\37\1\144\1\37\1\145"+
    "\2\37\1\146\6\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\17\37\1\147\6\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\1\150\11\37\1\151\2\37"+
    "\1\152\10\37\3\0\1\37\21\0\2\37\6\0\27\37"+
    "\4\0\1\153\3\37\1\154\21\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\12\37\1\155\11\37\1\156"+
    "\1\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\1\157\14\37\1\160\4\37\1\161\3\37\3\0\1\37"+
    "\21\0\2\37\6\0\27\37\4\0\3\37\1\162\1\37"+
    "\1\163\1\164\5\37\1\165\11\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\10\37\1\166\15\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\1\167\14\37"+
    "\1\170\10\37\3\0\1\37\21\0\2\37\6\0\27\37"+
    "\4\0\4\37\1\171\10\37\1\172\4\37\1\173\3\37"+
    "\3\0\1\37\21\0\2\37\6\0\27\37\4\0\1\174"+
    "\25\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\4\37\1\175\21\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\1\176\6\37\1\177\5\37\1\200\1\37"+
    "\1\201\6\37\3\0\1\37\21\0\2\37\6\0\27\37"+
    "\4\0\7\37\1\202\16\37\3\0\1\37\113\0\1\203"+
    "\3\0\4\75\1\204\53\75\1\77\35\75\2\101\1\0"+
    "\112\101\13\0\1\205\103\0\2\106\1\0\112\106\21\0"+
    "\2\206\112\0\1\107\1\0\2\110\12\0\1\111\6\0"+
    "\1\112\23\0\1\111\41\0\1\207\1\0\1\207\2\0"+
    "\2\210\114\0\2\211\6\0\6\211\25\0\6\211\70\0"+
    "\1\112\72\0\2\37\6\0\3\37\1\212\23\37\4\0"+
    "\26\37\3\0\1\37\21\0\2\37\6\0\4\37\1\213"+
    "\22\37\4\0\26\37\3\0\1\37\21\0\2\37\6\0"+
    "\21\37\1\214\5\37\4\0\26\37\3\0\1\37\21\0"+
    "\2\37\6\0\5\37\1\215\21\37\4\0\26\37\3\0"+
    "\1\37\21\0\2\37\6\0\10\37\1\216\7\37\1\217"+
    "\6\37\4\0\26\37\3\0\1\37\21\0\2\37\6\0"+
    "\14\37\1\220\12\37\4\0\26\37\3\0\1\37\21\0"+
    "\2\37\6\0\17\37\1\221\7\37\4\0\26\37\3\0"+
    "\1\37\21\0\2\37\6\0\4\37\1\222\22\37\4\0"+
    "\26\37\3\0\1\37\21\0\2\37\6\0\3\37\1\223"+
    "\15\37\1\224\5\37\4\0\26\37\3\0\1\37\21\0"+
    "\2\37\6\0\4\37\1\225\22\37\4\0\26\37\3\0"+
    "\1\37\21\0\2\37\6\0\10\37\1\226\16\37\4\0"+
    "\26\37\3\0\1\37\21\0\2\37\6\0\4\37\1\227"+
    "\22\37\4\0\26\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\12\37\1\230\13\37\3\0\1\37\21\0"+
    "\2\37\6\0\4\37\1\231\3\37\1\232\16\37\4\0"+
    "\26\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\10\37\1\233\15\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\15\37\1\234\7\37\1\235\3\0\1\37"+
    "\21\0\2\37\6\0\27\37\4\0\17\37\1\236\6\37"+
    "\3\0\1\37\21\0\2\37\6\0\27\37\4\0\4\37"+
    "\1\237\21\37\3\0\1\37\21\0\2\37\6\0\27\37"+
    "\4\0\20\37\1\240\5\37\3\0\1\37\21\0\2\37"+
    "\6\0\27\37\4\0\1\241\25\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\14\37\1\242\11\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\21\37\1\243"+
    "\4\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\5\37\1\244\20\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\20\37\1\245\5\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\16\37\1\246\7\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\12\37\1\247"+
    "\13\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\17\37\1\250\6\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\14\37\1\251\11\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\14\37\1\252\11\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\11\37\1\253"+
    "\14\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\2\37\1\254\21\37\1\255\1\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\3\37\1\256\22\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\23\37\1\257"+
    "\2\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\3\37\1\260\13\37\1\261\6\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\12\37\1\262\13\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\17\37\1\263"+
    "\6\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\21\37\1\264\4\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\6\37\1\265\17\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\17\37\1\266\6\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\22\37\1\267"+
    "\3\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\10\37\1\270\15\37\3\0\1\37\1\0\12\205\1\271"+
    "\103\205\20\0\2\206\12\0\1\111\6\0\1\112\23\0"+
    "\1\111\46\0\2\210\114\0\2\210\21\0\1\112\72\0"+
    "\2\37\6\0\1\272\26\37\4\0\26\37\3\0\1\37"+
    "\21\0\2\37\6\0\2\37\1\273\24\37\4\0\26\37"+
    "\3\0\1\37\21\0\2\37\6\0\1\274\26\37\4\0"+
    "\26\37\3\0\1\37\21\0\2\37\6\0\5\37\1\275"+
    "\21\37\4\0\26\37\3\0\1\37\21\0\2\37\6\0"+
    "\4\37\1\276\22\37\4\0\26\37\3\0\1\37\21\0"+
    "\2\37\6\0\1\277\26\37\4\0\26\37\3\0\1\37"+
    "\21\0\2\37\6\0\17\37\1\300\7\37\4\0\26\37"+
    "\3\0\1\37\21\0\2\37\6\0\4\37\1\301\22\37"+
    "\4\0\26\37\3\0\1\37\21\0\2\37\6\0\21\37"+
    "\1\302\5\37\4\0\26\37\3\0\1\37\21\0\2\37"+
    "\6\0\14\37\1\303\12\37\4\0\26\37\3\0\1\37"+
    "\21\0\2\37\6\0\27\37\4\0\1\304\25\37\3\0"+
    "\1\37\21\0\2\37\6\0\14\37\1\305\12\37\4\0"+
    "\26\37\3\0\1\37\21\0\2\37\6\0\12\37\1\306"+
    "\14\37\4\0\26\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\1\307\25\37\3\0\1\37\21\0\2\37"+
    "\6\0\27\37\4\0\14\37\1\310\11\37\3\0\1\37"+
    "\21\0\2\37\6\0\27\37\4\0\1\311\25\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\1\312\25\37"+
    "\3\0\1\37\21\0\2\37\6\0\27\37\4\0\21\37"+
    "\1\313\4\37\3\0\1\37\21\0\2\37\6\0\27\37"+
    "\4\0\20\37\1\314\5\37\3\0\1\37\21\0\2\37"+
    "\6\0\27\37\4\0\21\37\1\315\4\37\3\0\1\37"+
    "\21\0\2\37\6\0\27\37\4\0\1\316\25\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\4\37\1\317"+
    "\21\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\15\37\1\320\10\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\20\37\1\321\5\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\2\37\1\322\23\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\15\37\1\323"+
    "\10\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\4\37\1\324\21\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\17\37\1\325\6\37\3\0\1\37\21\0"+
    "\2\37\6\0\24\37\1\326\2\37\4\0\26\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\4\37\1\327"+
    "\21\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\12\37\1\330\13\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\1\331\25\37\3\0\1\37\21\0\2\37"+
    "\6\0\27\37\4\0\22\37\1\332\3\37\3\0\1\37"+
    "\21\0\2\37\6\0\27\37\4\0\4\37\1\333\21\37"+
    "\3\0\1\37\21\0\2\37\6\0\27\37\4\0\4\37"+
    "\1\334\21\37\3\0\1\37\21\0\2\37\6\0\27\37"+
    "\4\0\12\37\1\335\13\37\3\0\1\37\1\0\12\205"+
    "\1\336\103\205\20\0\2\37\6\0\11\37\1\337\15\37"+
    "\4\0\26\37\3\0\1\37\21\0\2\37\6\0\7\37"+
    "\1\340\17\37\4\0\26\37\3\0\1\37\21\0\2\37"+
    "\6\0\22\37\1\341\4\37\4\0\26\37\3\0\1\37"+
    "\21\0\2\37\6\0\12\37\1\342\14\37\4\0\26\37"+
    "\3\0\1\37\21\0\2\37\6\0\1\343\26\37\4\0"+
    "\26\37\3\0\1\37\21\0\2\37\6\0\2\37\1\344"+
    "\24\37\4\0\26\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\20\37\1\345\5\37\3\0\1\37\21\0"+
    "\2\37\6\0\4\37\1\346\22\37\4\0\26\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\20\37\1\347"+
    "\5\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\25\37\1\350\3\0\1\37\21\0\2\37\6\0\27\37"+
    "\4\0\25\37\1\351\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\11\37\1\352\14\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\20\37\1\353\5\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\10\37\1\354"+
    "\15\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\17\37\1\355\6\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\4\37\1\356\21\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\21\37\1\357\4\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\17\37\1\360"+
    "\6\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\15\37\1\361\10\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\1\362\25\37\3\0\1\37\21\0\2\37"+
    "\6\0\27\37\4\0\12\37\1\363\13\37\3\0\1\37"+
    "\21\0\2\37\6\0\27\37\4\0\17\37\1\364\6\37"+
    "\3\0\1\37\21\0\2\37\6\0\27\37\4\0\1\365"+
    "\25\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\4\37\1\366\21\37\3\0\1\37\1\0\12\205\1\336"+
    "\4\205\1\367\76\205\20\0\2\37\6\0\12\37\1\370"+
    "\14\37\4\0\26\37\3\0\1\37\21\0\2\37\6\0"+
    "\12\37\1\371\14\37\4\0\26\37\3\0\1\37\21\0"+
    "\2\37\6\0\21\37\1\372\5\37\4\0\26\37\3\0"+
    "\1\37\21\0\2\37\6\0\7\37\1\373\17\37\4\0"+
    "\26\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\20\37\1\374\5\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\13\37\1\375\12\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\14\37\1\376\11\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\21\37\1\377"+
    "\4\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\10\37\1\u0100\15\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\4\37\1\u0101\21\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\10\37\1\u0102\15\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\12\37\1\u0103"+
    "\13\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\14\37\1\u0104\11\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\3\37\1\u0105\22\37\3\0\1\37\21\0"+
    "\2\37\6\0\21\37\1\u0106\5\37\4\0\26\37\3\0"+
    "\1\37\21\0\2\37\6\0\26\37\1\u0107\4\0\26\37"+
    "\3\0\1\37\21\0\2\37\6\0\15\37\1\u0108\11\37"+
    "\4\0\26\37\3\0\1\37\21\0\2\37\6\0\27\37"+
    "\4\0\15\37\1\u0109\10\37\3\0\1\37\21\0\2\37"+
    "\6\0\27\37\4\0\22\37\1\u010a\3\37\3\0\1\37"+
    "\21\0\2\37\6\0\1\u010b\2\37\1\u010c\23\37\4\0"+
    "\26\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\15\37\1\u010d\10\37\3\0\1\37\21\0\2\37\6\0"+
    "\4\37\1\u010e\22\37\4\0\26\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\21\37\1\u010f\4\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\4\37\1\u0110"+
    "\21\37\3\0\1\37\21\0\2\37\6\0\16\37\1\u0111"+
    "\10\37\4\0\26\37\3\0\1\37\21\0\2\37\6\0"+
    "\17\37\1\u0112\7\37\4\0\26\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\22\37\1\u0113\3\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\4\37\1\u0114"+
    "\21\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\12\37\1\u0115\13\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\4\37\1\u0116\21\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\14\37\1\u0117\11\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\17\37\1\u0118"+
    "\6\37\3\0\1\37\21\0\2\37\6\0\20\37\1\u0119"+
    "\6\37\4\0\26\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\12\37\1\u011a\13\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\15\37\1\u011b\10\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\20\37\1\u011c"+
    "\5\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\10\37\1\u011d\15\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\5\37\1\u011e\20\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\17\37\1\u011f\6\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\4\37\1\u0120"+
    "\21\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\15\37\1\u0121\10\37\3\0\1\37\21\0\2\37\6\0"+
    "\14\37\1\u0122\12\37\4\0\26\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\1\u0123\25\37\3\0\1\37"+
    "\21\0\2\37\6\0\27\37\4\0\15\37\1\u0124\10\37"+
    "\3\0\1\37\21\0\2\37\6\0\27\37\4\0\2\37"+
    "\1\u0125\23\37\3\0\1\37\21\0\2\37\6\0\27\37"+
    "\4\0\12\37\1\u0126\13\37\3\0\1\37\21\0\2\37"+
    "\6\0\27\37\4\0\4\37\1\u0127\21\37\3\0\1\37"+
    "\21\0\2\37\6\0\27\37\4\0\20\37\1\u0128\5\37"+
    "\3\0\1\37\21\0\2\37\6\0\27\37\4\0\17\37"+
    "\1\u0129\6\37\3\0\1\37\21\0\2\37\6\0\27\37"+
    "\4\0\15\37\1\u012a\10\37\3\0\1\37\21\0\2\37"+
    "\6\0\27\37\4\0\23\37\1\u012b\2\37\3\0\1\37"+
    "\21\0\2\37\6\0\27\37\4\0\14\37\1\u012c\11\37"+
    "\3\0\1\37\21\0\2\37\6\0\1\u012d\26\37\4\0"+
    "\26\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\3\37\1\u012e\22\37\3\0\1\37\21\0\2\37\6\0"+
    "\27\37\4\0\17\37\1\u012f\6\37\3\0\1\37\21\0"+
    "\2\37\6\0\27\37\4\0\20\37\1\u0130\5\37\3\0"+
    "\1\37\21\0\2\37\6\0\27\37\4\0\17\37\1\u0131"+
    "\6\37\3\0\1\37\21\0\2\37\6\0\27\37\4\0"+
    "\1\u0132\25\37\3\0\1\37\21\0\2\37\6\0\27\37"+
    "\4\0\25\37\1\u0133\3\0\1\37\1\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[17160];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\2\1\3\11\1\1\1\11"+
    "\1\1\1\11\3\1\2\11\3\1\1\11\17\1\3\11"+
    "\16\1\1\11\1\1\2\11\1\0\1\11\1\0\1\11"+
    "\2\0\2\11\1\0\1\1\1\0\1\1\1\0\1\11"+
    "\1\0\1\1\5\11\61\1\1\11\3\1\1\0\157\1"+
    "\1\11\74\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _LiteFlowLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LiteFlowLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 97: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 98: break;
          case 3:
            { return LITEFLOW_NOT;
            }
          // fall through
          case 99: break;
          case 4:
            { return LITEFLOW_REMAINDER;
            }
          // fall through
          case 100: break;
          case 5:
            { return LITEFLOW_BIT_AND;
            }
          // fall through
          case 101: break;
          case 6:
            { return LITEFLOW_PAREN_LEFT;
            }
          // fall through
          case 102: break;
          case 7:
            { return LITEFLOW_PAREN_RIGHT;
            }
          // fall through
          case 103: break;
          case 8:
            { return LITEFLOW_MUL;
            }
          // fall through
          case 104: break;
          case 9:
            { return LITEFLOW_PLUS;
            }
          // fall through
          case 105: break;
          case 10:
            { return LITEFLOW_COMMA;
            }
          // fall through
          case 106: break;
          case 11:
            { return LITEFLOW_MINUS;
            }
          // fall through
          case 107: break;
          case 12:
            { return LITEFLOW_DOT;
            }
          // fall through
          case 108: break;
          case 13:
            { return LITEFLOW_QUOTIENT;
            }
          // fall through
          case 109: break;
          case 14:
            { return LITEFLOW_NUMBER;
            }
          // fall through
          case 110: break;
          case 15:
            { return LITEFLOW_COLON;
            }
          // fall through
          case 111: break;
          case 16:
            { return LITEFLOW_SEMICOLON;
            }
          // fall through
          case 112: break;
          case 17:
            { return LITEFLOW_LESS;
            }
          // fall through
          case 113: break;
          case 18:
            { return LITEFLOW_ASSIGN;
            }
          // fall through
          case 114: break;
          case 19:
            { return LITEFLOW_GREATER;
            }
          // fall through
          case 115: break;
          case 20:
            { return LITEFLOW_QUESTION;
            }
          // fall through
          case 116: break;
          case 21:
            { return LITEFLOW_IDENTIFIER;
            }
          // fall through
          case 117: break;
          case 22:
            { return LITEFLOW_BRACK_LEFT;
            }
          // fall through
          case 118: break;
          case 23:
            { return LITEFLOW_BRACK_RIGHT;
            }
          // fall through
          case 119: break;
          case 24:
            { return LITEFLOW_BIT_XOR;
            }
          // fall through
          case 120: break;
          case 25:
            { return LITEFLOW_BRACE_LEFT;
            }
          // fall through
          case 121: break;
          case 26:
            { return LITEFLOW_BIT_OR;
            }
          // fall through
          case 122: break;
          case 27:
            { return LITEFLOW_BRACE_RIGHT;
            }
          // fall through
          case 123: break;
          case 28:
            { return LITEFLOW_NOT_EQ;
            }
          // fall through
          case 124: break;
          case 29:
            { return LITEFLOW_STRING;
            }
          // fall through
          case 125: break;
          case 30:
            { return LITEFLOW_COND_AND;
            }
          // fall through
          case 126: break;
          case 31:
            { return LITEFLOW_PLUS_PLUS;
            }
          // fall through
          case 127: break;
          case 32:
            { return LITEFLOW_MINUS_MINUS;
            }
          // fall through
          case 128: break;
          case 33:
            { return LITEFLOW_LINE_COMMENT;
            }
          // fall through
          case 129: break;
          case 34:
            { return LITEFLOW_SHIFT_LEFT;
            }
          // fall through
          case 130: break;
          case 35:
            { return LITEFLOW_LESS_OR_EQUAL;
            }
          // fall through
          case 131: break;
          case 36:
            { return LITEFLOW_EQ;
            }
          // fall through
          case 132: break;
          case 37:
            { return LITEFLOW_GREATER_OR_EQUAL;
            }
          // fall through
          case 133: break;
          case 38:
            { return LITEFLOW_SHIFT_RIGHT;
            }
          // fall through
          case 134: break;
          case 39:
            { return LITEFLOW_DO;
            }
          // fall through
          case 135: break;
          case 40:
            { return LITEFLOW_LIF;
            }
          // fall through
          case 136: break;
          case 41:
            { return LITEFLOW_LOR;
            }
          // fall through
          case 137: break;
          case 42:
            { return LITEFLOW_UTO;
            }
          // fall through
          case 138: break;
          case 43:
            { return LITEFLOW_ID;
            }
          // fall through
          case 139: break;
          case 44:
            { return LITEFLOW_IF;
            }
          // fall through
          case 140: break;
          case 45:
            { return LITEFLOW_IN;
            }
          // fall through
          case 141: break;
          case 46:
            { return LITEFLOW_TO;
            }
          // fall through
          case 142: break;
          case 47:
            { return LITEFLOW_COND_OR;
            }
          // fall through
          case 143: break;
          case 48:
            { return LITEFLOW_BLOCK_COMMENT;
            }
          // fall through
          case 144: break;
          case 49:
            { return LITEFLOW_LAND;
            }
          // fall through
          case 145: break;
          case 50:
            { return LITEFLOW_LFOR;
            }
          // fall through
          case 146: break;
          case 51:
            { return LITEFLOW_LNOT;
            }
          // fall through
          case 147: break;
          case 52:
            { return LITEFLOW_PRE;
            }
          // fall through
          case 148: break;
          case 53:
            { return LITEFLOW_ANY;
            }
          // fall through
          case 149: break;
          case 54:
            { return LITEFLOW_DEF;
            }
          // fall through
          case 150: break;
          case 55:
            { return LITEFLOW_FOR;
            }
          // fall through
          case 151: break;
          case 56:
            { return LITEFLOW_MOD;
            }
          // fall through
          case 152: break;
          case 57:
            { return LITEFLOW_NEW;
            }
          // fall through
          case 153: break;
          case 58:
            { return LITEFLOW_NOR;
            }
          // fall through
          case 154: break;
          case 59:
            { return LITEFLOW_TAG;
            }
          // fall through
          case 155: break;
          case 60:
            { return LITEFLOW_LELIF;
            }
          // fall through
          case 156: break;
          case 61:
            { return LITEFLOW_LELSE;
            }
          // fall through
          case 157: break;
          case 62:
            { return LITEFLOW_UNODE;
            }
          // fall through
          case 158: break;
          case 63:
            { return LITEFLOW_THEN;
            }
          // fall through
          case 159: break;
          case 64:
            { return LITEFLOW_WHEN;
            }
          // fall through
          case 160: break;
          case 65:
            { return LITEFLOW_CAST;
            }
          // fall through
          case 161: break;
          case 66:
            { return LITEFLOW_DATA;
            }
          // fall through
          case 162: break;
          case 67:
            { return LITEFLOW_ELSE;
            }
          // fall through
          case 163: break;
          case 68:
            { return LITEFLOW_LIKE;
            }
          // fall through
          case 164: break;
          case 69:
            { return LITEFLOW_NODE;
            }
          // fall through
          case 165: break;
          case 70:
            { return LITEFLOW_NULL;
            }
          // fall through
          case 166: break;
          case 71:
            { return LITEFLOW_TRUE;
            }
          // fall through
          case 167: break;
          case 72:
            { return LITEFLOW_LBREAK;
            }
          // fall through
          case 168: break;
          case 73:
            { return LITEFLOW_LCATCH;
            }
          // fall through
          case 169: break;
          case 74:
            { return LITEFLOW_LWHILE;
            }
          // fall through
          case 170: break;
          case 75:
            { return LITEFLOW_ALIAS;
            }
          // fall through
          case 171: break;
          case 76:
            { return LITEFLOW_ARRAY;
            }
          // fall through
          case 172: break;
          case 77:
            { return LITEFLOW_BREAK;
            }
          // fall through
          case 173: break;
          case 78:
            { return LITEFLOW_CLASS;
            }
          // fall through
          case 174: break;
          case 79:
            { return LITEFLOW_FALSE;
            }
          // fall through
          case 175: break;
          case 80:
            { return LITEFLOW_MACRO;
            }
          // fall through
          case 176: break;
          case 81:
            { return LITEFLOW_WHILE;
            }
          // fall through
          case 177: break;
          case 82:
            { return LITEFLOW_SWITCH;
            }
          // fall through
          case 178: break;
          case 83:
            { return LITEFLOW_VCLASS;
            }
          // fall through
          case 179: break;
          case 84:
            { return LITEFLOW_RETURN;
            }
          // fall through
          case 180: break;
          case 85:
            { return LITEFLOW_DEFAULT;
            }
          // fall through
          case 181: break;
          case 86:
            { return LITEFLOW_FINALLY;
            }
          // fall through
          case 182: break;
          case 87:
            { return LITEFLOW_LITERATOR;
            }
          // fall through
          case 183: break;
          case 88:
            { return LITEFLOW_CONTINUE;
            }
          // fall through
          case 184: break;
          case 89:
            { return LITEFLOW_FUNCTION;
            }
          // fall through
          case 185: break;
          case 90:
            { return LITEFLOW_PARALLEL;
            }
          // fall through
          case 186: break;
          case 91:
            { return LITEFLOW_EXPORTDEF;
            }
          // fall through
          case 187: break;
          case 92:
            { return LITEFLOW_THREADPOOL;
            }
          // fall through
          case 188: break;
          case 93:
            { return LITEFLOW_EXPORTALIAS;
            }
          // fall through
          case 189: break;
          case 94:
            { return LITEFLOW_IGNOREERROR;
            }
          // fall through
          case 190: break;
          case 95:
            { return LITEFLOW_MAXWAITSECONDS;
            }
          // fall through
          case 191: break;
          case 96:
            { return LITEFLOW_ANONYMOUSNEWARRAY;
            }
          // fall through
          case 192: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
