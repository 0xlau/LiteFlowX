/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package top.xystudio.plugin.idea.liteflowx.system.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static top.xystudio.plugin.idea.liteflowx.system.language.psi.LiteFlowTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_LiteFlowLexer.flex</tt>
 */
public class _LiteFlowLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4224 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\6\1\7\3\6\1\10\6\6\1\7\14\6\1\11\3\6\1\11\3\6"+
    "\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\3\6\1\11\2\6\1"+
    "\10\3\6\1\10\2\6\1\7\10\6\1\7\1\6\1\10\57\6\1\5\12\6\1\7\1\10\11\6\1\11\3"+
    "\6\1\10\5\6\1\12\5\6\1\10\2\6\1\10\4\6\1\12\35\6\1\13\1\14\1\15\175\6\1\5"+
    "\160\6\1\7\24\6\1\10\1\6\1\7\5\6\2\10\2\6\1\10\14\6\1\10\130\6\1\10\54\6\1"+
    "\7\35\6\1\11\3\6\1\10\1\6\1\16\4\6\1\10\10\6\1\10\12\6\1\10\3\6\1\10\13\6"+
    "\1\10\3\6\1\7\2\6\1\10\15\6\1\7\32\6\1\10\60\6\1\7\6\6\1\10\143\6\1\17\1\20"+
    "\12\6\1\10\65\6");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\2\2\1\1\3\22\0\1\4\1\41\1\14\1\0\1\5\1\46\1\43\1\12\1\33\1\34"+
    "\1\11\1\26\1\37\1\15\1\24\1\10\1\16\11\20\1\35\1\36\1\44\1\40\1\47\1\50\1"+
    "\0\1\102\1\21\1\76\1\21\1\25\1\101\1\7\1\72\1\75\2\7\1\103\1\23\1\22\1\7\1"+
    "\77\1\7\1\100\1\74\1\71\2\7\1\73\1\17\1\104\1\7\1\31\1\13\1\32\1\45\1\7\1"+
    "\0\1\66\1\65\1\70\1\105\1\53\1\52\1\106\1\61\1\51\1\7\1\67\1\54\1\110\1\64"+
    "\1\56\2\7\1\57\1\55\1\62\1\63\1\7\1\60\1\17\1\107\1\7\1\27\1\42\1\30\7\0\1"+
    "\1\32\0\1\4\77\0\12\6\46\0\12\6\14\0\12\6\20\0\12\6\6\0\12\6\6\0\13\4\35\0"+
    "\2\1\5\0\1\4\57\0\1\4\26\0\12\6\16\0\62\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\2\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\20\3\2\0\1\34"+
    "\3\0\1\35\1\7\1\0\1\7\2\0\1\7\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\6\3\1\51\17\3\1\0\1\34\2\7"+
    "\1\0\1\7\1\3\1\52\6\3\1\53\1\54\1\55"+
    "\2\3\1\56\4\3\1\57\1\3\1\60\2\0\2\3"+
    "\1\61\2\3\1\62\1\3\1\63\2\3\1\64\1\65"+
    "\2\3\1\0\1\3\1\66\1\3\1\67\1\3\1\70"+
    "\3\3\1\71\1\3\1\72\2\3\1\73\4\3\1\74"+
    "\2\3\1\75\3\3\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\111\0\u016d\0\u01b6"+
    "\0\u01ff\0\u0248\0\u0291\0\111\0\u02da\0\111\0\111\0\111"+
    "\0\111\0\111\0\111\0\111\0\111\0\111\0\u0323\0\u036c"+
    "\0\u03b5\0\u03fe\0\u0447\0\111\0\111\0\u0490\0\111\0\u04d9"+
    "\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f\0\u06d8\0\u0721"+
    "\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e\0\u08d7\0\u0920\0\u0969"+
    "\0\u016d\0\111\0\u09b2\0\u01b6\0\u09fb\0\111\0\u0a44\0\u0a8d"+
    "\0\111\0\u0ad6\0\u0b1f\0\u0b68\0\111\0\111\0\111\0\111"+
    "\0\111\0\111\0\111\0\111\0\111\0\333\0\333\0\u0bb1"+
    "\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e\0\333\0\u0d67\0\u0db0"+
    "\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4\0\u0f1d\0\u0f66\0\u0faf\0\u0ff8"+
    "\0\u1041\0\u108a\0\u10d3\0\u111c\0\u1165\0\u11ae\0\u01b6\0\u0a8d"+
    "\0\u11f7\0\u1240\0\u1289\0\u12d2\0\333\0\u131b\0\u1364\0\u13ad"+
    "\0\u13f6\0\u143f\0\u1488\0\333\0\333\0\333\0\u14d1\0\u151a"+
    "\0\333\0\u1563\0\u15ac\0\u15f5\0\u163e\0\333\0\u1687\0\333"+
    "\0\u16d0\0\u1719\0\u1762\0\u17ab\0\333\0\u17f4\0\u183d\0\333"+
    "\0\u1886\0\333\0\u18cf\0\u1918\0\333\0\333\0\u1961\0\u19aa"+
    "\0\u19f3\0\u1a3c\0\333\0\u1a85\0\333\0\u1ace\0\333\0\u1b17"+
    "\0\u1b60\0\u1ba9\0\u11ae\0\u1bf2\0\333\0\u1c3b\0\u1c84\0\333"+
    "\0\u1ccd\0\u1d16\0\u1d5f\0\u1da8\0\333\0\u1df1\0\u1e3a\0\333"+
    "\0\u1e83\0\u1ecc\0\u1f15\0\333\0\333";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\4\3\1\4\1\2\1\4\1\5\1\6\1\7"+
    "\1\2\1\10\1\11\1\12\1\4\1\13\3\4\1\14"+
    "\1\4\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\3\4"+
    "\1\43\1\44\1\4\1\45\1\4\1\46\1\47\1\50"+
    "\1\4\1\51\1\52\1\4\1\53\1\54\2\4\1\55"+
    "\1\4\1\56\6\4\1\57\112\0\4\3\112\0\2\4"+
    "\6\0\6\4\1\0\1\4\23\0\40\4\11\0\1\60"+
    "\77\0\12\61\1\62\1\63\75\61\13\64\1\65\1\62"+
    "\74\64\15\0\1\66\1\12\1\0\1\13\106\0\1\67"+
    "\1\70\1\67\2\0\1\71\1\72\1\73\25\0\1\73"+
    "\53\0\1\13\1\0\1\13\1\0\1\74\1\71\1\72"+
    "\1\73\25\0\1\73\63\0\1\75\122\0\1\76\110\0"+
    "\1\77\112\0\1\100\111\0\1\101\105\0\1\102\3\0"+
    "\1\103\104\0\1\104\6\0\1\105\47\0\2\4\6\0"+
    "\6\4\1\0\1\4\23\0\1\4\1\106\32\4\1\107"+
    "\1\110\2\4\6\0\2\4\6\0\6\4\1\0\1\4"+
    "\23\0\5\4\1\111\7\4\1\112\22\4\6\0\2\4"+
    "\6\0\6\4\1\0\1\4\23\0\3\4\1\113\34\4"+
    "\6\0\2\4\6\0\6\4\1\0\1\4\23\0\2\4"+
    "\1\114\35\4\6\0\2\4\6\0\6\4\1\0\1\4"+
    "\23\0\10\4\1\115\27\4\6\0\2\4\6\0\6\4"+
    "\1\0\1\4\23\0\5\4\1\116\1\117\1\4\1\120"+
    "\4\4\1\121\22\4\6\0\2\4\6\0\6\4\1\0"+
    "\1\4\23\0\2\4\1\122\2\4\1\123\4\4\1\124"+
    "\25\4\6\0\2\4\6\0\6\4\1\0\1\4\23\0"+
    "\6\4\1\125\31\4\6\0\2\4\6\0\6\4\1\0"+
    "\1\4\23\0\13\4\1\126\24\4\6\0\2\4\6\0"+
    "\6\4\1\0\1\4\23\0\5\4\1\127\32\4\6\0"+
    "\2\4\6\0\6\4\1\0\1\4\23\0\21\4\1\130"+
    "\16\4\6\0\2\4\6\0\6\4\1\0\1\4\23\0"+
    "\21\4\1\131\16\4\6\0\2\4\6\0\6\4\1\0"+
    "\1\4\23\0\22\4\1\132\15\4\6\0\2\4\6\0"+
    "\6\4\1\0\1\4\23\0\27\4\1\133\10\4\6\0"+
    "\2\4\6\0\6\4\1\0\1\4\23\0\24\4\1\134"+
    "\13\4\6\0\2\4\6\0\6\4\1\0\1\4\23\0"+
    "\5\4\1\135\32\4\11\0\1\136\77\0\1\61\3\0"+
    "\105\61\13\64\1\65\1\137\74\64\16\0\1\67\1\0"+
    "\1\67\2\0\1\71\1\72\1\73\25\0\1\73\53\0"+
    "\1\140\1\0\2\140\3\0\1\140\24\0\2\140\11\0"+
    "\2\140\1\0\1\140\5\0\1\140\2\0\2\140\2\0"+
    "\1\140\21\0\1\141\1\0\1\141\105\0\1\142\1\143"+
    "\1\0\1\143\5\0\1\142\105\0\1\71\73\0\2\4"+
    "\6\0\6\4\1\0\1\4\23\0\13\4\1\144\24\4"+
    "\6\0\2\4\6\0\6\4\1\0\1\4\23\0\6\4"+
    "\1\145\31\4\6\0\2\4\6\0\6\4\1\0\1\4"+
    "\23\0\3\4\1\146\34\4\6\0\2\4\6\0\6\4"+
    "\1\0\1\4\23\0\4\4\1\147\33\4\6\0\2\4"+
    "\6\0\6\4\1\0\1\4\23\0\11\4\1\150\26\4"+
    "\6\0\2\4\6\0\6\4\1\0\1\4\23\0\1\151"+
    "\37\4\6\0\2\4\6\0\6\4\1\0\1\4\23\0"+
    "\12\4\1\152\25\4\6\0\2\4\6\0\6\4\1\0"+
    "\1\4\23\0\6\4\1\153\31\4\6\0\2\4\6\0"+
    "\6\4\1\0\1\4\23\0\35\4\1\154\2\4\6\0"+
    "\2\4\6\0\6\4\1\0\1\4\23\0\7\4\1\155"+
    "\30\4\6\0\2\4\6\0\6\4\1\0\1\4\23\0"+
    "\6\4\1\156\31\4\6\0\2\4\6\0\6\4\1\0"+
    "\1\4\23\0\3\4\1\157\34\4\6\0\2\4\6\0"+
    "\6\4\1\0\1\4\23\0\2\4\1\160\35\4\6\0"+
    "\2\4\6\0\6\4\1\0\1\4\23\0\36\4\1\161"+
    "\1\4\6\0\2\4\6\0\6\4\1\0\1\4\23\0"+
    "\13\4\1\162\24\4\6\0\2\4\6\0\6\4\1\0"+
    "\1\163\23\0\40\4\6\0\2\4\6\0\6\4\1\0"+
    "\1\164\23\0\40\4\6\0\2\4\6\0\6\4\1\0"+
    "\1\4\23\0\24\4\1\165\13\4\6\0\2\4\6\0"+
    "\6\4\1\0\1\166\23\0\40\4\6\0\2\4\6\0"+
    "\4\4\1\167\1\4\1\0\1\4\23\0\40\4\6\0"+
    "\2\4\6\0\6\4\1\0\1\4\23\0\34\4\1\170"+
    "\3\4\1\136\2\0\1\171\5\136\1\172\77\136\16\0"+
    "\1\141\1\0\1\141\2\0\1\71\1\0\1\73\25\0"+
    "\1\73\53\0\1\143\1\0\1\143\106\0\1\143\1\0"+
    "\1\143\2\0\1\71\73\0\2\4\6\0\6\4\1\0"+
    "\1\4\23\0\5\4\1\173\32\4\6\0\2\4\6\0"+
    "\6\4\1\0\1\4\23\0\4\4\1\174\33\4\6\0"+
    "\2\4\6\0\6\4\1\0\1\4\23\0\2\4\1\175"+
    "\35\4\6\0\2\4\6\0\6\4\1\0\1\4\23\0"+
    "\12\4\1\176\25\4\6\0\2\4\6\0\6\4\1\0"+
    "\1\4\23\0\3\4\1\177\34\4\6\0\2\4\6\0"+
    "\6\4\1\0\1\4\23\0\2\4\1\200\35\4\6\0"+
    "\2\4\6\0\6\4\1\0\1\4\23\0\2\4\1\201"+
    "\35\4\6\0\2\4\6\0\6\4\1\0\1\4\23\0"+
    "\3\4\1\202\34\4\6\0\2\4\6\0\6\4\1\0"+
    "\1\4\23\0\15\4\1\203\22\4\6\0\2\4\6\0"+
    "\6\4\1\0\1\4\23\0\11\4\1\204\26\4\6\0"+
    "\2\4\6\0\4\4\1\205\1\4\1\0\1\4\23\0"+
    "\40\4\6\0\2\4\6\0\4\4\1\206\1\4\1\0"+
    "\1\4\23\0\40\4\6\0\2\4\6\0\6\4\1\0"+
    "\1\4\23\0\20\4\1\207\17\4\6\0\2\4\6\0"+
    "\6\4\1\0\1\4\23\0\31\4\1\210\6\4\2\0"+
    "\1\136\106\0\1\136\2\0\1\171\5\136\1\211\77\136"+
    "\6\0\2\4\6\0\6\4\1\0\1\4\23\0\6\4"+
    "\1\212\31\4\6\0\2\4\6\0\6\4\1\0\1\4"+
    "\23\0\2\4\1\213\35\4\6\0\2\4\6\0\6\4"+
    "\1\0\1\4\23\0\6\4\1\214\31\4\6\0\2\4"+
    "\6\0\6\4\1\0\1\4\23\0\2\4\1\215\35\4"+
    "\6\0\2\4\6\0\6\4\1\0\1\4\23\0\15\4"+
    "\1\216\22\4\6\0\2\4\6\0\6\4\1\0\1\4"+
    "\23\0\16\4\1\217\21\4\6\0\2\4\6\0\6\4"+
    "\1\0\1\4\23\0\1\220\37\4\6\0\2\4\6\0"+
    "\6\4\1\0\1\4\23\0\25\4\1\221\12\4\6\0"+
    "\2\4\6\0\6\4\1\0\1\4\23\0\32\4\1\222"+
    "\5\4\1\136\2\0\1\171\4\136\1\223\1\211\77\136"+
    "\6\0\2\4\6\0\6\4\1\0\1\4\23\0\2\4"+
    "\1\224\35\4\6\0\2\4\6\0\6\4\1\0\1\4"+
    "\23\0\13\4\1\225\24\4\6\0\2\4\6\0\6\4"+
    "\1\0\1\4\23\0\34\4\1\226\3\4\6\0\2\4"+
    "\6\0\6\4\1\0\1\4\23\0\13\4\1\227\24\4"+
    "\6\0\2\4\6\0\6\4\1\0\1\4\23\0\21\4"+
    "\1\230\16\4\6\0\2\4\6\0\6\4\1\0\1\4"+
    "\23\0\32\4\1\231\5\4\6\0\2\4\6\0\6\4"+
    "\1\0\1\232\23\0\40\4\6\0\2\4\6\0\6\4"+
    "\1\0\1\4\23\0\26\4\1\233\11\4\6\0\2\4"+
    "\6\0\6\4\1\0\1\4\23\0\12\4\1\234\25\4"+
    "\6\0\2\4\6\0\6\4\1\0\1\4\23\0\33\4"+
    "\1\235\4\4\6\0\2\4\6\0\6\4\1\0\1\4"+
    "\23\0\6\4\1\236\31\4\6\0\2\4\6\0\6\4"+
    "\1\0\1\4\23\0\5\4\1\237\32\4\6\0\2\4"+
    "\6\0\6\4\1\0\1\4\23\0\2\4\1\240\35\4"+
    "\6\0\2\4\6\0\6\4\1\0\1\4\23\0\6\4"+
    "\1\241\31\4\6\0\2\4\6\0\6\4\1\0\1\4"+
    "\23\0\5\4\1\242\32\4\6\0\2\4\6\0\6\4"+
    "\1\0\1\4\23\0\5\4\1\243\32\4\6\0\2\4"+
    "\6\0\6\4\1\0\1\4\23\0\3\4\1\244\34\4"+
    "\6\0\2\4\6\0\6\4\1\0\1\4\23\0\6\4"+
    "\1\245\31\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8030];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\5\1\1\11\1\1\11\11"+
    "\5\1\2\11\1\1\1\11\20\1\2\0\1\11\3\0"+
    "\1\11\1\1\1\0\1\11\2\0\1\1\11\11\30\1"+
    "\1\0\3\1\1\0\26\1\2\0\16\1\1\0\34\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _LiteFlowLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LiteFlowLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 64: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 65: break;
          case 3: 
            { return LITEFLOW_IDENTIFIER;
            } 
            // fall through
          case 66: break;
          case 4: 
            { return LITEFLOW_QUOTIENT;
            } 
            // fall through
          case 67: break;
          case 5: 
            { return LITEFLOW_MUL;
            } 
            // fall through
          case 68: break;
          case 6: 
            { return LITEFLOW_MINUS;
            } 
            // fall through
          case 69: break;
          case 7: 
            { return LITEFLOW_NUMBER;
            } 
            // fall through
          case 70: break;
          case 8: 
            { return LITEFLOW_DOT;
            } 
            // fall through
          case 71: break;
          case 9: 
            { return LITEFLOW_PLUS;
            } 
            // fall through
          case 72: break;
          case 10: 
            { return LITEFLOW_BRACE_LEFT;
            } 
            // fall through
          case 73: break;
          case 11: 
            { return LITEFLOW_BRACE_RIGHT;
            } 
            // fall through
          case 74: break;
          case 12: 
            { return LITEFLOW_BRACK_LEFT;
            } 
            // fall through
          case 75: break;
          case 13: 
            { return LITEFLOW_BRACK_RIGHT;
            } 
            // fall through
          case 76: break;
          case 14: 
            { return LITEFLOW_PAREN_LEFT;
            } 
            // fall through
          case 77: break;
          case 15: 
            { return LITEFLOW_PAREN_RIGHT;
            } 
            // fall through
          case 78: break;
          case 16: 
            { return LITEFLOW_COLON;
            } 
            // fall through
          case 79: break;
          case 17: 
            { return LITEFLOW_SEMICOLON;
            } 
            // fall through
          case 80: break;
          case 18: 
            { return LITEFLOW_COMMA;
            } 
            // fall through
          case 81: break;
          case 19: 
            { return LITEFLOW_ASSIGN;
            } 
            // fall through
          case 82: break;
          case 20: 
            { return LITEFLOW_NOT;
            } 
            // fall through
          case 83: break;
          case 21: 
            { return LITEFLOW_BIT_OR;
            } 
            // fall through
          case 84: break;
          case 22: 
            { return LITEFLOW_BIT_AND;
            } 
            // fall through
          case 85: break;
          case 23: 
            { return LITEFLOW_LESS;
            } 
            // fall through
          case 86: break;
          case 24: 
            { return LITEFLOW_BIT_XOR;
            } 
            // fall through
          case 87: break;
          case 25: 
            { return LITEFLOW_REMAINDER;
            } 
            // fall through
          case 88: break;
          case 26: 
            { return LITEFLOW_GREATER;
            } 
            // fall through
          case 89: break;
          case 27: 
            { return LITEFLOW_QUESTION;
            } 
            // fall through
          case 90: break;
          case 28: 
            { return LITEFLOW_STRING;
            } 
            // fall through
          case 91: break;
          case 29: 
            { return LITEFLOW_MINUS_MINUS;
            } 
            // fall through
          case 92: break;
          case 30: 
            { return LITEFLOW_PLUS_PLUS;
            } 
            // fall through
          case 93: break;
          case 31: 
            { return LITEFLOW_EQ;
            } 
            // fall through
          case 94: break;
          case 32: 
            { return LITEFLOW_NOT_EQ;
            } 
            // fall through
          case 95: break;
          case 33: 
            { return LITEFLOW_COND_OR;
            } 
            // fall through
          case 96: break;
          case 34: 
            { return LITEFLOW_COND_AND;
            } 
            // fall through
          case 97: break;
          case 35: 
            { return LITEFLOW_LESS_OR_EQUAL;
            } 
            // fall through
          case 98: break;
          case 36: 
            { return LITEFLOW_SHIFT_LEFT;
            } 
            // fall through
          case 99: break;
          case 37: 
            { return LITEFLOW_GREATER_OR_EQUAL;
            } 
            // fall through
          case 100: break;
          case 38: 
            { return LITEFLOW_SHIFT_RIGHT;
            } 
            // fall through
          case 101: break;
          case 39: 
            { return LITEFLOW_IF;
            } 
            // fall through
          case 102: break;
          case 40: 
            { return LITEFLOW_ID;
            } 
            // fall through
          case 103: break;
          case 41: 
            { return LITEFLOW_TO;
            } 
            // fall through
          case 104: break;
          case 42: 
            { return LITEFLOW_FOR;
            } 
            // fall through
          case 105: break;
          case 43: 
            { return LITEFLOW_TAG;
            } 
            // fall through
          case 106: break;
          case 44: 
            { return LITEFLOW_NEW;
            } 
            // fall through
          case 107: break;
          case 45: 
            { return LITEFLOW_NOR;
            } 
            // fall through
          case 108: break;
          case 46: 
            { return LITEFLOW_ANY;
            } 
            // fall through
          case 109: break;
          case 47: 
            { return LITEFLOW_PRE;
            } 
            // fall through
          case 110: break;
          case 48: 
            { return LITEFLOW_MOD;
            } 
            // fall through
          case 111: break;
          case 49: 
            { return LITEFLOW_ELSE;
            } 
            // fall through
          case 112: break;
          case 50: 
            { return LITEFLOW_TRUE;
            } 
            // fall through
          case 113: break;
          case 51: 
            { return LITEFLOW_NULL;
            } 
            // fall through
          case 114: break;
          case 52: 
            { return LITEFLOW_THEN;
            } 
            // fall through
          case 115: break;
          case 53: 
            { return LITEFLOW_WHEN;
            } 
            // fall through
          case 116: break;
          case 54: 
            { return LITEFLOW_FALSE;
            } 
            // fall through
          case 117: break;
          case 55: 
            { return LITEFLOW_WHILE;
            } 
            // fall through
          case 118: break;
          case 56: 
            { return LITEFLOW_BREAK;
            } 
            // fall through
          case 119: break;
          case 57: 
            { return LITEFLOW_BLOCK_COMMENT;
            } 
            // fall through
          case 120: break;
          case 58: 
            { return LITEFLOW_RETURN;
            } 
            // fall through
          case 121: break;
          case 59: 
            { return LITEFLOW_SWITCH;
            } 
            // fall through
          case 122: break;
          case 60: 
            { return LITEFLOW_FINALLY;
            } 
            // fall through
          case 123: break;
          case 61: 
            { return LITEFLOW_CONTINUE;
            } 
            // fall through
          case 124: break;
          case 62: 
            { return LITEFLOW_THREADPOOL;
            } 
            // fall through
          case 125: break;
          case 63: 
            { return LITEFLOW_IGNOREERROR;
            } 
            // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
